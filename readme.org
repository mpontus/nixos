# -*- eval: (add-hook 'after-save-hook 'org-babel-tangle nil 'local); compile-command: "nixos-rebuild build"  -*-
#+TITLE: NixOS configuration
#+STARTUP: showall
#+PROPERTY: header-args :tangle no :noweb yes :noweb-ref system-configuration

#+BEGIN_SRC nix :tangle /etc/nixos/configuration.nix :noweb-ref none
  # edit this configuration file to define what should be installed on
  # your system.  help is available in the configuration.nix(5) man page
  # and in the nixos manual (accessible by running ‘nixos-help’).
  { config, lib,  pkgs, ... }:

  {
    imports =
      [ # include the results of the hardware scan.
        ./hardware-configuration.nix
        # ./pia-openvpn.nix
        # ./cachix.nix
        <<import-files>>
      ];

    environment.systemPackages = with pkgs; [
      <<system-packages>>
    ];

    nixpkgs.overlays = [
      <<overlays>>
    ];

    nixpkgs.config.packageOverrides = pkgs: {
      <<package-overrides>>
    };

    nixpkgs.config.permittedInsecurePackages = [
      <<insecure-packages>>
    ];

    nixpkgs.config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
      <<unfree-packages>>
    ];




    <<system-configuration>>

    # this value determines the nixos release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. it‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "21.05"; # did you read the comment?
  }
#+END_SRC

* Nix
** Flakes

#+begin_src nix :noweb-ref system-configuration
nix.settings.experimental-features = [ "nix-command" "flakes" ];
#+end_src

** Trusted users

#+begin_src nix :noweb-ref system-configuration
nix.settings.trusted-users = [ "root" "@wheel" ];
#+end_src

** COMMENT Trusted users

#+begin_src nix :noweb-ref system-configuration
nix.buildMachines = [ {
  hostName = "builder";
  system = "x86_64-linux";
  # if the builder supports building for multiple architectures, 
  # replace the previous line by, e.g.,
  # systems = ["x86_64-linux" "aarch64-linux"];
  maxJobs = 1;
  speedFactor = 2;
  supportedFeatures = [ "nixos-test" "benchmark" "big-parallel" "kvm" ];
  mandatoryFeatures = [ ];
}] ;
nix.distributedBuilds = true;
nix.settings.builders-use-substitutes = true;
#+end_src

** Home Manager

Load home-manager module

#+begin_src nix :noweb-ref import-files
  <home-manager/nixos>
#+end_src

Configure home environment

#+begin_src nix :noweb-ref system-configuration
  home-manager.users.mpontus = { pkgs, ... }: {
    imports = [
      <<home-import-files>>
    ];

    home.packages = with pkgs; [
      <<home-packages>>
    ];


    <<home-configuration>>

    home.stateVersion = "18.09";
  };
#+end_src

*** Use global nixpkgs

#+begin_src nix :noweb-ref system-configuration
home-manager.useGlobalPkgs = true;
#+end_src

*** Extra user

#+begin_src nix :noweb-ref system-configuration
  home-manager.users.er = { pkgs, ... }: {
    imports = [
      <<home-import-files>>
    ];

    home.packages = with pkgs; [
      <<home-packages>>
    ];


    <<home-configuration>>

    home.stateVersion = "18.09";
  };
#+end_src

*** NUR

Enable custom user repositories

#+begin_src nix :noweb-ref package-overrides
nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
  inherit pkgs;
};
#+end_src

*** Root user

Give root user git

#+begin_src nix :noweb-ref system-configuration
  home-manager.users.root = { pkgs, ... }: {
    home.packages = with pkgs; [ htop git ];
    home.stateVersion = "18.09";
  };
#+end_src

** COMMENT Store optimization

#+begin_src nix
nix.settings.auto-optimise-store = true;
#+end_src

** Unstable channel

#+begin_src nix :noweb-ref system-configuration
nix.package = pkgs.nixVersions.git;
#+end_src

** Unstable packages

#+begin_src nix :noweb-ref package-overrides
unstable = import <nixos-unstable> {
  config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
    <<unfree-packages>>
  ];
  config.permittedInsecurePackages = [
    <<insecure-packages>>
  ];
};
#+end_src

* System
** Boot loader

#+begin_src nix
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
#+end_src

** Kernel modules

#+begin_src nix
  boot.kernelModules = [
    <<kernel-modules>>
  ];
#+end_src

** COMMENT Try to fix crash

See https://forums.lenovo.com/t5/Fedora/ThinkPad-X1-Carbon-gen-9-freezes-intermittently-kernel-halt/m-p/5100987?page=1

#+begin_src nix :noweb-ref system-configuration
  boot.kernelParams = [
    "intel_idle.max_cstate=1" "i915.enable_dc=0" "ahci.mobile_lpm_policy=1"
  ];
#+end_src

Trying older kernel

#+begin_src nix :noweb-ref system-configuration
  boot.kernelPackages = pkgs.linuxKernel.packages.linux_5_15;
#+end_src

** Filesystems
*** NTFS
#+begin_src nix
boot.supportedFilesystems = [ "ntfs" ];
#+end_src
** COMMENT Time zone

#+begin_src nix
  # Set your time zone.
  time.timeZone = "Europe/Moscow";
#+end_src

** Users

#+begin_src nix
  users.users.mpontus = {
    isNormalUser = true;
    hashedPassword = "$6$QrKXg5g6nEHsWbkm$GdlWBtzXoQo7djWCJcMYcAZ/Zypk13Bq6nETchLc49hstumtoZ2q0tKvvrX3CLxqEmnZhDA8/0aw/Sen9mo5L/";
    extraGroups = [ "wheel" "pcspkr" "input" ];
  };
#+end_src

*** sudo

Increase sudo password timeout

#+begin_src nix :noweb-ref system-configuration
  security.sudo.extraConfig = ''
    Defaults        env_reset,timestamp_timeout=30
  '';
#+end_src

*** Extra user

#+begin_src nix
  users.users.er = {
    isNormalUser = true;
    hashedPassword = "$6$QrKXg5g6nEHsWbkm$GdlWBtzXoQo7djWCJcMYcAZ/Zypk13Bq6nETchLc49hstumtoZ2q0tKvvrX3CLxqEmnZhDA8/0aw/Sen9mo5L/";
    extraGroups = [ "wheel" "pcspkr" "input" ];
  };
#+end_src

*** Enable `$HOME/bin` in $PATH for normal users

#+begin_src nix
  environment.homeBinInPath = true;
#+end_src

*** COMMENT Root password

Don't forget to reset a password with ‘passwd’

#+begin_src nix
  users.users.root.initialPassword = "nixos";
#+end_src

*** XDG environment

#+begin_src nix
  environment.sessionVariables = rec {
    XDG_CACHE_HOME  = "\${HOME}/.cache";
    XDG_CONFIG_HOME = "\${HOME}/.config";
    XDG_BIN_HOME    = "\${HOME}/.local/bin";
    XDG_DATA_HOME   = "\${HOME}/.local/share";

    PATH = [
      "\${XDG_BIN_HOME}"
    ];
  };
#+end_src

** Networking
*** Hostname

#+begin_src nix
  networking.hostName = "nixos"; # Define your hostname.
#+end_src
*** Disable IPV6
#+begin_src nix
networking.enableIPv6  = false;
#+end_src
*** COMMENT DHCP

Disable DHCP by default to run NixOS in a VM.

#+begin_src nix
  networking.useDHCP = false;
  networking.interfaces.wlp2s0.useDHCP = true;
#+end_src

*** COMMENT Firewall

Disabled to allow visiting locally running website from mobile

#+begin_src nix
  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;
#+end_src

*** VPN
**** VLESS
#+begin_src nix
#+end_src
**** OpenVPN
#+begin_src nix
services.openvpn.servers.pia = {
  config = "config ${pkgs.fetchzip {
    url = "https://www.privateinternetaccess.com/openvpn/openvpn.zip";
    sha256 = "sha256-ZA8RS6eIjMVQfBt+9hYyhaq8LByy5oJaO9Ed+x8KtW8=";
    stripRoot = false   ;
  }}/netherlands.ovpn";
};
#+end_src

***** Disable by default

#+begin_src nix :noweb-ref system-configuration
services.openvpn.servers.pia.autoStart = false;
#+end_src

**** COMMENT Restart VPN after network configuration change

#+begin_src nix
# See https://discourse.nixos.org/t/run-script-on-network-interface-down/9167/2
networking.networkmanager.dispatcherScripts = [
  {
    source = pkgs.writeScript "dispatcherLog" ''
      echo "1='$1' 2='$2'" >> /tmp/dispatcher-log

      if [[ "$1" == "wlp2s0" ]]; then
        if  [[ "$2" == "down" ]]; then
          ${pkgs.systemd}/bin/systemctl stop openvpn-pia
        else
          ${pkgs.systemd}/bin/systemctl restart openvpn-pia
        fi
      fi
    '';
  }
];

#+end_src

**** COMMENT GUI Client

#+begin_src nix :noweb-ref import-files
./piavpn
#+end_src

#+begin_src nix :noweb-ref home-packages
piavpn
#+end_src

#+begin_src nix :noweb-ref system-configuration
services.piavpn.enable = true;
# services.piavpn.package = pkgs.piavpn;
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Super>P" = {
  name = "Open PIA VPN";
  command = "pia-client";
};
#+end_src

*** DNS

#+begin_src nix :noweb-ref system-configuration
networking.resolvconf.dnsExtensionMechanism = false;
#+end_src

*** COMMENT Paper VPN
#+begin_src nix :noweb-ref system-packages
(callPackage ./pkgs/outline.nix { })
#+end_src
*** COMMENT Spoof defalt ttl

#+begin_src nix
boot.kernel.sysctl = {
  "net.ipv4.ip_default_ttl" = 129;
};

#+end_src

*** COMMENT Realtek Wifi Card

#+begin_src nix :noweb-ref system-configuration
boot.extraModulePackages = with config.boot.kernelPackages; [ rtl8821ce rtl8821cu ];
#+end_src

#+begin_src nix :noweb-ref kernel-modules
"8821ce"
#+end_src

*** COMMENT Disable Mac address randomization

#+begin_src nix :noweb-ref system-configuration
networking.networkmanager.settings."device-mac-randomization"."wifi.scan-rand-mac-address" = "no";
#+end_src

** SSH

#+begin_src nix :noweb-ref system-configuration
services.openssh = {
  enable = true;
  ports = [ 22 ];
  settings = {
    PasswordAuthentication = true;
    AllowUsers = null; # Allows all users by default. Can be [ "user1" "user2" ]
    UseDns = true;
    X11Forwarding = false;
    PermitRootLogin = "prohibit-password"; # "yes", "without-password", "prohibit-password", "forced-commands-only", "no"
  };
};
#+end_src

** Virtualization
#+begin_src nix :noweb-ref system-packages
pkgs.virt-manager
#+end_src

#+begin_src nix :noweb-ref system-configuration
virtualisation.libvirtd.enable = true;
#+end_src

#+begin_src nix :noweb-ref kernel-modules
"kvm-intel" "kvm-amd"
#+end_src

*** Increase default msize

#+begin_src nix :noweb-ref system-configuration
environment.variables = {
    QEMU_OPTS = "-m 4096 -smp 4 -enable-kvm";
};
#+end_src

* Desktop
** Fonts

#+begin_src nix :noweb-ref system-configuration
  fonts = {
    enableDefaultFonts = false;
    fonts = with pkgs; [
      corefonts
      noto-fonts
      noto-fonts-cjk-sans
      noto-fonts-emoji
      twitter-color-emoji
      liberation_ttf
      fira-code
      fira-code-symbols
      # mplus-outline-fonts
      dina-font
      proggyfonts
      source-code-pro
      gentium
      (nerdfonts.override { fonts = [ "FiraCode" "DroidSansMono" ]; })
    ];
  };
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"corefonts"
#+end_src

** Xorg

#+begin_src nix :noweb-ref system-configuration
  services.xserver.enable = true;
#+end_src

*** Attempt to fix window flickering

See: https://askubuntu.com/a/1231443/350323

#+begin_src nix :noweb-ref system-configuration
services.xserver.config = ''
Section "Device"

Identifier "Intel Graphics"
Driver "intel"
Option "AccelMethod" "sna"
Option "TearFree" "true"

EndSection
'';
#+end_src

** GDM

#+begin_src nix :noweb-ref system-configuration
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.displayManager.gdm.wayland = false;
#+end_src

** Gnome

Enable the GNOME Desktop Environment

#+begin_src nix :noweb-ref system-configuration
  services.xserver.desktopManager.gnome.enable = true;
#+end_src
*** Extensions

#+begin_src nix :noweb-ref system-packages
gnome-tweaks
#+end_src

*** Auto-login

#+begin_src nix :noweb-ref system-configuration
  systemd.services."getty@tty1".enable = true;
  systemd.services."autovt@tty1".enable = true;
  services.xserver.displayManager.autoLogin.enable = true;
  services.xserver.displayManager.autoLogin.user = "mpontus";
#+end_src

*** Dconf & keybindings

Install dconf editor

#+begin_src nix :noweb-ref home-packages
  dconf-editor
#+end_src

Enable literate configuration for dconf settings and keymap

#+begin_src nix :noweb-ref home-configuration
  dconf.settings = {
    <<dconf-settings>>
  } // (lib.trivial.pipe {
    <<dconf-keymap>>
  } [
    (lib.attrsets.mapAttrsToList (binding: { name, command }: {
      inherit binding name command;
    }))
    (lib.lists.imap0 (i: value: {
      name = "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom${toString(i)}";
      inherit value;
    }))
    lib.attrsets.listToAttrs
  ]
  );
#+end_src

*** Disable warning message when opening GUI

#+begin_src nix :noweb-ref dconf-settings
  "ca/desrt/dconf-editor" = { show-warning = false; };
#+end_src

*** COMMENT Gestures

#+begin_src nix :noweb-ref system-packages
gnomeExtensions.x11-gestures touchegg
#+end_src

See https://www.reddit.com/r/NixOS/comments/6x22z0/enabling_touch_screen/

#+begin_src nix :noweb-ref system-configuration
services.xserver.libinput.enable = true;
services.xserver.libinput.touchpad.naturalScrolling = false;
services.xserver.libinput.touchpad.tapping = true;
services.xserver.libinput.touchpad.disableWhileTyping = true;
services.xserver.libinput.touchpad.horizontalScrolling = true;
services.xserver.modules = [ pkgs.xf86_input_wacom ];
services.xserver.wacom.enable = true;
#+end_src

*** COMMENT gnomecast

#+begin_src nix :noweb-ref home-packages
gnomecast
#+end_src

**** Use fork

#+begin_src nix :noweb-ref overlays
(self: super:
  with import (fetchTarball {
    url =
      "https://github.com/MaeIsBad/nixpkgs/archive/fix-gnomecast.tar.gz";
    sha256 = "03grfc1xw4lj3k523al2pqbqj2g1nwlwilrr8bczc50ipyvszdz5";
  }) {inherit pkgs;}; {
    inherit gnomecast;
  })
#+end_src

** DWM

#+begin_src nix :noweb-ref system-configuration
services.xserver.windowManager.dwm.enable = true;
#+end_src

** ly

#+begin_src nix :noweb-ref system-packages
ly
#+end_src

** COMMENT LightDM
** COMMENT XMonad

#+begin_src nix :noweb-ref system-configuration
services.xserver.windowManager.xmonad = {
  enable = true;
  enableContribAndExtras = true;
};
#+end_src

** COMMENT Sound

#+begin_src nix
  sound.enable = true;
#+end_src

*** PulseAudio

#+begin_src nix
hardware.pulseaudio.enable = true;
#+end_src

**** Bluetooth support for PulseAudio

#+begin_src nix
hardware.pulseaudio.package = pkgs.pulseaudioFull;
hardware.pulseaudio.extraConfig = "
  load-module module-switch-on-connect
";
#+end_src

** Bluetooth

#+begin_src nix
hardware.bluetooth.enable = true;
#+end_src

*** COMMENT Blueman

#+begin_src nix
  services.blueman.enable = true;
#+end_src

*** Bluetooth audio

#+begin_src nix
  hardware.bluetooth.settings = {
    General = {
        Enable = "Source,Sink,Media,Socket";
        # Disable = "Headset";
        # Enable = "Source,Sink,Headet,Media,Socket";
        # Disable = "Socket";
        # MultiProfile = "multiple";
    };
  };
#+end_src

** Remote access
#+begin_src nix :noweb-ref home-packages
barrier
#+end_src
* Apps
** Editor
*** Emacs

#+begin_src nix :noweb-ref home-configuration
  programs.emacs = {
    enable = true;
    # package = pkgs.emacs.withPackages (epkgs: with epkgs; [
    #   <<emacs-packages>>
    # ]);
    # package = (pkgs.emacsGit.override {
    #   withXwidgets = true;
    # });
  };
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
  "<Super>e" = {
    name = "Switch to Emacs";
    command = "launch-or-raise -W Emacs emacs";
  };
#+end_src

**** Everywhere

#+begin_src nix :noweb-ref dconf-keymap
"<Super>i" = {
  name = "Emacs Everyhere";
  command = "emacsclient --eval '(emacs-everywhere)'";
};
#+end_src

**** COMMENT XWidgets

#+begin_src nix :noweb-ref overlays
(self: super: {
  emacs = super.emacs.overrideAttrs (old: rec { withXwidgets = true; });
})
#+end_src

**** COMMENT Pgtk

Import emacs-overlay from nix-community.

#+begin_src nix :noweb-ref overlays
(import (builtins.fetchTarball {
  url = "https://github.com/nix-community/emacs-overlay/archive/master.tar.gz";
}))
#+end_src

Use latest emacs with natively compiled modules.

#+begin_src nix :noweb-ref home-configuration
programs.emacs.package = pkgs.emacsPgtk;
#+end_src

**** VTerm

Enable vterm support.

#+begin_src nix :noweb-ref emacs-packages
vterm
#+end_src

**** COMMENT ChatGPT

#+begin_src nix :noweb-ref emacs-packages
(trivialBuild {
  pname = "ChatGPT.el";
  src = pkgs.fetchFromGitHub {
    owner = "joshcho";
    repo = "ChatGPT.el";
    rev = "14aaad60cc4970477f8e7d1486cf84d5b2f6470e";
    sha256 = "kH5CBlYP6OVf/QSRdjg1gBIFXu/DtkQswYzjeRdrP0g=";
  };

  packageRequires = [
    epc
    (pkgs.python3.withPackages (ps:
      with ps; [
        setuptools
        epc

        (buildPythonPackage rec {
          pname = "chatgpt-wrapper";
          version = "0.10.6";
          format = "setuptools";

          src = pkgs.fetchFromGitHub {
            owner = "mmabrouk";
            repo = "chatgpt-wrapper";
            rev = "2e9e14f689cf970df319c33033b5832a85e128be";
            sha256 = "ybePcuEZ5zt8FLRXbRxEcR1M/U7e2C8RbUHewU3MpPo=";
          };
          propagatedBuildInputs = [
            alembic
            # ai21
            # cohere
            # email-validator
            flask
            huggingface-hub
            jinja2
            # langchain
            names
            numexpr
            openai
            openpyxl
            # playwright
            prompt-toolkit
            # pydantic-computed
            pyperclip
            python-frontmatter
            pyyaml
            rich
            sqlalchemy
            # tiktoken
          ];
        })
      ]))
  ];
})
#+end_src

**** COMMENT Service

#+begin_src nix :noweb-ref home-configuration
services.emacs.enable = true;
#+end_src

**** COMMENT Overlay

#+begin_src emacs-lisp :noweb-ref overlays
(import (builtins.fetchTarball {
    url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
}))
#+end_src

**** COMMENT Doom Emacs

#+begin_src nix :noweb-ref overlays
(self: super:
  let
    doom-emacs = (self.callPackage (builtins.fetchTarball {
      url =
        "https://github.com/nix-community/nix-doom-emacs/archive/master.tar.gz";
    }) {
      # Directory containing your config.el, init.el and packages.el files
      doomPrivateDir = ./doom.d;
      bundledPackages = true;
      emacsPackages = super;
    });
  in { emacs = doom-emacs; })
#+end_src


*** COMMENT Doom Emacs

#+begin_src nix :noweb-ref overlays
(self: super: {
  doom-emacs = (self.callPackage (builtins.fetchTarball {
    url =
      "https://github.com/nix-community/nix-doom-emacs/archive/master.tar.gz";
  }) {
    # Directory containing your config.el, init.el and packages.el files
    doomPrivateDir = ./doom.d.new;
    extraPackages = epkgs: [ epkgs.vterm epkgs.magit self.python3 ];
    # emacsPackagesOverlay = self: super: {
    #   magit-delta = super.magit-delta.overrideAttrs
    #     (esuper: { buildInputs = esuper.buildInputs ++ [ pkgs.git ]; });
    # };
  });
})
#+end_src

#+begin_src nix :noweb-ref home-packages
doom-emacs
#+end_src

**** Overlay

#+begin_src nix :noweb-ref doom-dependency-overrides
"emacs-overlay" = (builtins.fetchTarball {
    url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
});
#+end_src

**** COMMENT Packages

***** grip

Github-styled markdown previewer.

#+begin_src nix :noweb-ref doom-extra-packages
   grip
#+end_src

#+begin_src elisp :noweb-ref doom-extra-config
  (setq-default grip-binary-path "${pkgs.python3Packages.grip}/bin/grip")
#+end_src

*** vim
**** Default editor
#+begin_src nix :noweb-ref system-configuration
programs.vim.defaultEditor = true;
#+end_src
** Browser
*** Firefox

#+begin_src nix :noweb-ref home-configuration
programs.firefox.enable = true;
# programs.firefox.package = pkgs.unstable.firefox-unwrapped;
programs.firefox.package = pkgs.firefox-beta-bin.unwrapped;
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Super>w" = {
  name = "Switch to Firefox";
  command = "launch-or-raise -W Navigator firefox";
};
#+end_src

**** Nightly

#+begin_src nix :noweb-ref overlays
(let
    # Change this to a rev sha to pin
    moz-rev = "master";
    moz-url = builtins.fetchTarball { url = "https://github.com/mozilla/nixpkgs-mozilla/archive/${moz-rev}.tar.gz";};
    nightlyOverlay = (import "${moz-url}/firefox-overlay.nix");
  in nightlyOverlay)
#+end_src

#+begin_src nix :noweb-ref home-configuration
# programs.firefox.package = pkgs.latest.firefox-nightly-bin.unwrapped;
#+end_src

#+begin_src nix :noweb-ref home-packages
# latest.firefox-nightly-bin
#+end_src

**** COMMENT Native extensions

#+begin_src nix :noweb-ref home-configuration
programs.firefox.enableGnomeExtensions = true;
#+end_sr

#+begin_src nix :noweb-ref overlays
# (self: super: {
#     firefox = super.firefox.override {
#         enableGnomeExtensions = true;
#         enableTridactylNative = true;
#     };
# })
#+end_src

#+begin_src nix :noweb-ref system-configuration
services.gnome.chrome-gnome-shell.enable = true;
#+end_src

**** COMMENT Addons

#+begin_src nix :noweb-ref home-configuration
  programs.firefox.extensions = with pkgs.nur.repos.rycee.firefox-addons; [
    # https-everywhere
    privacy-badger
  ];
#+end_src

**** COMMENT Gestures

Make firefox use xinput2 for improved touchscreen support

#+begin_src nix :noweb-ref home-configuration
  home.sessionVariables = {
    MOZ_USE_XINPUT2 = "1";
  };
#+end_src

**** COMMENT fx_cast

#+begin_src nix :noweb-ref home-packages
unstable.fx_cast_bridge
#+end_src
**** Overlay
#+begin_src nix :noweb-ref overlays
(import (builtins.fetchTarball
    "https://github.com/mozilla/nixpkgs-mozilla/archive/master.tar.gz"))
#+end_src
*** COMMENT nyxt

#+begin_src nix :noweb-ref home-packages
nyxt
#+end_src

*** Tor Browser

#+begin_src nix :noweb-ref home-packages
unstable.tor-browser-bundle-bin
#+end_src
*** COMMENT Chromium

#+begin_src nix :noweb-ref home-packages
unstable.chromium
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Shift><Super>c" = {
  name = "Switch to Chromium";
  command = "launch-or-raise -W Chroimum chromium-browser";
};
#+end_src

*** COMMENT Edge

#+begin_src nix :noweb-ref home-packages
unstable.microsoft-edge
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"microsoft-edge"
#+end_src

** Docs
*** Libreoffice

#+begin_src nix :noweb-ref home-packages
libreoffice-qt
hunspell
hunspellDicts.uk_UA
hunspellDicts.th_TH
#+end_src

** Books

#+begin_src nix :noweb-ref home-packages
okular
#+end_src

** Audacity
#+begin_src nix :noweb-ref home-packages
audacity
#+end_src
** Passwords
*** GNU Pass
#+begin_src nix :noweb-ref home-packages
pass
#+end_src
*** COMMENT Authy

I also use Authy for 2FA

#+begin_src nix :noweb-ref home-packages
authy
#+end_src

Need to enable unfree package

#+begin_src nix :noweb-ref unfree-packages
"authy"
#+end_src

And to add electron to insecure packages

#+begin_src nix :noweb-ref insecure-packages
"electron-9.4.4"
#+end_src

** Personal finance
*** COMMENT Ledger

#+begin_src nix :noweb-ref home-packages
ledger
#+end_src

*** Monero

#+begin_src nix :noweb-ref home-packages
monero-gui
#+end_src

** Shell
*** bash
#+begin_src nix :noweb-ref home-configuration
  programs.bash = {
    enable = true
    ;
    historySize = 1000000000;
    historyFileSize = 1000000000;
    historyControl = ["ignoredups" "erasedups"];
    initExtra = ''
        export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
    '';
    enableVteIntegration = true;
  };
#+end_src

*** fish
#+begin_src nix :noweb-ref system-configuration
programs.fish.enable = true;
#+end_src

**** COMMENT Default shell
#+begin_src nix :noweb-ref system-configuration
users.users.mpontus.shell = pkgs.fish;
#+end_src

**** COMMENT Home-manager

Home-manager version of fish allows installing plugins

#+begin_src nix :noweb-ref home-configuration
  programs.fish = {
    enable = true;
    plugins = [
      <<fish-plugins>>
    ];
  };
#+end_src

**** z

Plugin for jumping to recent directories

#+begin_src nix :noweb-ref fish-plugins
{
  name = "z";
  src = pkgs.fetchFromGitHub {
    owner = "jethrokuan";
    repo = "z";
    rev = "e0e1b9dfdba362f8ab1ae8c1afc7ccf62b89f7eb";
    sha256 = "0dbnir6jbwjpjalz14snzd3cgdysgcs3raznsijd6savad3qhijc";
  };
}
#+end_src

**** TODO COMMENT zsh-like up behavior

> call up the last local command on the first up-arrow, but then resort to merged history

Source: https://github.com/fish-shell/fish-shell/issues/825#issuecomment-440286038

#+begin_src nix
{
  body = ''
    function up-or-search -d "Depending on cursor position and current mode, either search backward or move up one line"
        # If we are already in search mode, continue
        if commandline --search-mode
            commandline -f history-search-backward
            return
        end

        # If we are navigating the pager, then up always navigates
        if commandline --paging-mode
            commandline -f up-line
            return
        end

        # We are not already in search mode.
        # If we are on the top line, start search mode,
        # otherwise move up
        set lineno (commandline -L)

        switch $lineno
            case 1
                commandline -f history-search-backward
                history merge # <-- ADDED THIS

            case '*'
                commandline -f up-line
        end
    end
  '';
}
#+end_src
** Terminal
*** Tilix (dropdown terminal emulator)

#+begin_src nix :noweb-ref home-packages
tilix
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Super>c" = {
  name = "Tilix";
  command = "launch-or-raise -W tilix tilix";
};
"<Super>\\" = {
  name = "Tilix (dropdown)";
  command = "tilix --quake";
};
#+end_src

*** Guake
#+begin_src nix :noweb-ref home-packages
guake
#+end_src
*** COMMENT Urxvt

#+begin_src nix :noweb-ref home-configuration
programs.urxvt = {
  enable = true;
  package = pkgs.rxvt-unicode-emoji;
  fonts = [ "xft:Droid Sans Mono Nerd Font:size=9" ];
};
#+end_src
** Productivity
*** COMMENT Obsidian

#+begin_src nix :noweb-ref home-packages
obsidian
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"obsidian"
#+end_src


*** COMMENT Roam Research

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/roamresearch { })
#+end_src

*** COMMENT Amazing Mavin

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/marvin.nix { })
#+end_src

*** COMMENT Responsively App

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/responsively-app.nix { })
#+end_src

*** COMMENT Cursor

Evaluating GPT-4 powered ide

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/Cursor.nix { })
#+end_src


*** TopTracker

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/toptracker { })
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Shift><Super>t" = {
  name = "Switch to TopTracker";
  command = "launch-or-raise -W TopTracker TopTracker";
};
#+end_src

** Communication
*** Slack

#+begin_src nix :noweb-ref unfree-packages
"slack"
#+end_src

#+begin_src nix :noweb-ref home-packages
unstable.slack
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Super>s" = {
  name = "Switch to Slack";
  command = "launch-or-raise -W Slack slack";
};
#+end_src


*** Telegram

#+begin_src nix :noweb-ref home-packages
unstable.tdesktop
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Super>t" = {
  name = "Switch to Telegram";
  command = "launch-or-raise -W TelegramDesktop telegram-desktop";
};
#+end_src


*** COMMENT Element

#+begin_src nix :noweb-ref home-packages
element-desktop
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Shift><Super>e" = {
  name = "Switch to Element";
  command = "launch-or-raise -W Element1 element-desktop";
};
#+end_src

*** Discord

#+begin_src nix :noweb-ref home-packages
discord
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"discord"
#+end_src
*** COMMENT Bluejeans

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/bluejeans { })
#+end_src
* System tools
** Beep
#+begin_src nix :noweb-ref home-packages
beep
#+end_src

*** Kernel module
#+begin_src :nix :noweb-ref kernel-modules
"pcspkr"
#+end_src
** Diagnostics
*** htop

Monitor active procesesses, memory and CPU usage

#+begin_src nix :noweb-ref home-packages
htop
#+end_src

*** lsof

List open files and sockets

#+begin_src nix :noweb-ref home-packages
lsof
#+end_src
*** inetutils

Traceroute...

#+begin_src nix :noweb-ref home-packages
inetutils
#+end_src

** Filesystem
*** file

Determine file type

#+begin_src nix :noweb-ref home-packages
file
#+end_src

*** tree

List directory contents recursively

#+begin_src nix :noweb-ref home-packages
tree
#+end_src

*** ncdu

Count file and directory sizes recursively.

#+begin_src nix :noweb-ref home-packages
ncdu
#+end_src

*** unzip

Unzip files.

#+begin_src nix :noweb-ref home-packages
unzip
#+end_src

*** sshfs

#+begin_src nix :noweb-ref home-packages
sshfs
#+end_src

** Searching
*** ag

Search text in files.

#+begin_src nix :noweb-ref home-packages
silver-searcher
#+end_src

*** ripgrep

#+begin_src nix :noweb-ref home-packages
ripgrep
#+end_src

*** fd

Search files by name.

#+begin_src nix :noweb-ref home-packages
fd
#+end_src
*** locate

Use `locate` to find files globally

#+begin_src nix :noweb-ref system-configuration
  # Enable `locate` command
  services.locate = {
    enable = true;
    locate = pkgs.mlocate;
    localuser = null;
    interval = "1h";
  };
#+end_src

** Processing
*** jq

Transform JSON files

#+begin_src nix :noweb-ref home-packages
jq
#+end_src

*** xsv

Transform CSV files

#+begin_src RemoveRemovenix :noweb-ref home-packages
xsv
#+end_src

*** COMMENT htmlq

Transform XML/HTML files

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/htmlq { })
#+end_src

*** imagemagick

Transform image files

#+begin_src nix :noweb-ref home-packages
imagemagick
#+end_src

** Scripting
*** Clipboard

#+begin_src nix :noweb-ref home-packages
  wl-clipboard
#+end_src

**** xclip

Needed for [emacs-anywhere](https://github.com/zachcurry/emacs-anywhere#try-it).

#+begin_src nix :noweb-ref home-packages
  xclip
#+end_src

*** WM controls

#+begin_src nix :noweb-ref home-packages
  wmctrl xdotool xorg.xprop xorg.xwininfo
#+end_src

* Development
** NodeJS
#+begin_src nix :noweb-ref home-packages
unstable.nodejs
# unstable.nodejs_16
yarn
#+end_src

#+begin_src nix :noweb-ref insecure-packages
"nodejs-16.20.2"
#+end_src
*** Yarn overlay

#+begin_src nix :noweb-ref overlays
(self: super: {
  yarn = super.unstable.yarn.overrideAttrs (oldAttrs: {
    version = "1.22.19";
    src = super.fetchurl {
      url = "https://github.com/yarnpkg/yarn/releases/download/v1.22.19/yarn-v1.22.19.tar.gz";
      hash = "sha256-cyYgusixaQ1QcnTwJfPGz9w2J6hNlkLjigdFLMAODy4=";
      # sha256 = "1mfzm3k6kpfy45kzmijg9vsrck8y14jjb6rrhba6gaifa4slzdl7";
    };
  });
})
#+end_src
*** Pnpm

#+begin_src nix :noweb-ref home-packages
pnpm
#+end_src

** Python
#+begin_src nix :noweb-ref home-packages
(python3.withPackages ( ps: with ps; [ pip setuptools epc nats-py ]))
#+end_src

** Amazon Q Developer CLI

#+begin_src nix :noweb-ref home-packages
# (callPackage ./pkgs/amazon-q-cli { })
unstable.amazon-q-cli
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"amazon-q-cli"
#+end_src

** Rust toolchain
#+begin_src nix :noweb-ref home-packages
unstable.rustc cargo wasm-pack
#+end_src

*** Needed for ~cargo generate~

#+begin_src nix :noweb-ref system-packages
pkg-config libssh2 zlib
#+end_src

#+begin_src nix :noweb-ref system-configuration
# See https://github.com/sfackler/rust-openssl/issues/1663#issuecomment-1603606249
environment.variables = {
  PKG_CONFIG_PATH = [ "${pkgs.openssl.dev}/lib/pkgconfig" "${pkgs.zlib.dev}/lib/pkgconfig" ];
}   ;
#+end_src

** VSCode

#+begin_src nix :noweb-ref home-configuration
programs.vscode = {
  enable = true;
  package = pkgs.unstable.vscode;
  # package = pkgs.vscode-insiders;
  # extensions = pkgs.vscode-utils.extensionsFromVscodeMarketplace (import ./vscode-extensions.nix).extensions;
};
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"code" "vscode"
#+end_src

#+begin_src nix :noweb-ref dconf-keymap
"<Super>v" = {
  name = "Switch to VSCode";
  command = "launch-or-raise -W Code code";
};
#+end_src

*** COMMENT Insiders
#+begin_src nix :noweb-ref overlays
(final: prev: {                 #
  vscode-insiders = (prev.vscode.override { isInsiders = true; }).overrideAttrs
    (oldAttrs: rec {
      pname = "vscode-insiders";
      src = (builtins.fetchTarball {
        url =
          "https://code.visualstudio.com/sha/download?build=insider&os=linux-x64";
        sha256 = "086avfbr7akf06xq1wyr30nklhgc3dmnc6l4dbf0hk002wqpxlf6";
      });
      version = "latest";
    });
})
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"code-insiders" "vscode-insiders"
#+end_src

#+begin_src nix :noweb-ref home-packages
vscode-insiders
#+end_src

** Cursor
#+begin_src nix :noweb-ref unfree-packages
"cursor"
#+end_src
** Postman
#+begin_src nix :noweb-ref system-packages
unstable.postman
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"postman"
#+end_src
** COMMENT Direnv
** Git

#+begin_src nix :noweb-ref system-packages
git
#+end_src

*** Config

#+begin_src nix :noweb-ref home-configuration
programs.git = {
  enable = true;
  extraConfig = {
    user.name = "Michael Pontus";
    user.email = "m.pontus@gmail.com";
    rerere.enabled = true;
  };
};
#+end_src

*** COMMENT Git LFS

Large File Storage

#+begin_src nix :noweb-ref system-packages
git-lfs
#+end_src

*** GitHub CLI

#+begin_src nix :noweb-ref home-packages
unstable.gh hub
#+end_src

** GCC
#+begin_src nix :noweb-ref system-packages
gnumake gcc binutils cmake
#+end_src
** GPG

#+begin_src nix :noweb-ref system-configuration
# programs.gnupg.agent.enable = true;
programs.gnupg.agent = {
  enable = true;
  enableSSHSupport = true;
  pinentryPackage = pkgs.pinentry-gtk2;
};
#+end_src
  gnupg

*** COMMENT gpg-agent

???

#+begin_src nix :noweb-ref home-configuration
  services.gpg-agent = {
    enable = true;
    defaultCacheTtl = 1800;
    enableSshSupport = true;
  };
#+end_src
** Deno
#+begin_src nix :noweb-ref home-packages
deno
#+end_src
** Mitmproxy
#+begin_src nix :noweb-ref home-packages
mitmproxy
#+end_src
** OpenSSL
#+begin_src nix :noweb-ref system-packages
openssl
#+end_src
** IPFS
*** /etc/hosts

#+begin_src nix :noweb-ref system-configuration
networking.extraHosts = ''
  127.0.0.1 localhost
  127.0.0.1 ipfs.local ff
  192.168.1.121 grafana.orangepi argocd.orangepi portainer.orangepi
'';
#+end_src

** Docker

#+begin_src nix
  virtualisation.docker.enable = true;
#+end_src

*** Add user to docker group

#+begin_src nix :noweb-ref system-configuration
  users.extraGroups.docker.members = ["mpontus"];
#+end_src

*** Mitigate hangs on system shutdown

See https://discourse.nixos.org/t/docker-hanging-on-reboot/18270

#+begin_src nix :noweb-ref system-configuration
virtualisation.docker.liveRestore = false;
#+end_src

*** Docker compose

#+begin_src nix :noweb-ref home-packages
docker-compose
#+end_src

** Protobuf

#+begin_src nix :noweb-ref home-packages
protobuf
#+end_src

** Temporal CLI
#+begin_src nix :noweb-ref home-packages
unstable.temporal-cli
#+end_src

** Ngrok
#+begin_src nix :noweb-ref home-packages
unstable.ngrok
#+end_src
#+begin_src nix :noweb-ref unfree-packages
"ngrok"
#+end_src
** COMMENT Minikube
#+begin_src nix :noweb-ref home-packages
minikube
#+end_src
** K3s

#+begin_src nix
  networking.firewall.allowedTCPPorts = [ 6443 ];
  services.k3s = {
    enable = false;
    role = "server";
    package = pkgs.unstable.k3s;
    # extraFlags =  toString ["--kubelet-arg=v=4"];
  };
#+end_src

*** Add user to k3s group

#+begin_src nix :noweb-ref system-configuration
users.extraGroups.k3s.members = ["mpontus"];
#+end_src
*** COMMENT /etc/hosts

#+begin_src nix :noweb-ref system-configuration
networking.extraHosts = ''


#+end_src

** Virtualbox

#+begin_src nix :noweb-ref unfree-packages
  "Oracle_VirtualBox_Extension_Pack"
#+end_src

#+begin_src nix :noweb-ref system-configuration
  virtualisation.virtualbox.host.enable = true;
  virtualisation.virtualbox.host.enableExtensionPack = true;
  users.extraGroups.vboxusers.members = ["mpontus" "er"];
#+end_src

** awscli

#+begin_src nix :noweb-ref home-packages
awscli2
#+end_src

** COMMENT aws-sam

#+begin_src nix :noweb-ref home-packages
unstable.aws-sam-cli
#+end_src

** Databases
#+begin_src nix :noweb-ref home-packages
dbeaver-bin
#+end_src
** NoSQL Workbench

#+begin_src nix :noweb-ref home-packages
(pkgs.appimageTools.wrapType2 {
  name = "nosql-workbench";
  src = pkgs.fetchurl {
    url =
      "https://s3.amazonaws.com/nosql-workbench/NoSQL%20Workbench-linux-x86_64-3.3.0.AppImage";
    hash = "sha256-15C4R1gUEQjkENdlEep6l88+QcCx8LYHM2bBKpoPcig=";
  };
})
#+end_src

** GraphQL

#+begin_src nix :noweb-ref home-packages
altair
#+end_src

** prettier

Format code using prettier

#+begin_src nix :noweb-ref home-packages
unstable.nodePackages."prettier"
#+end_src

** nixfmt

Format Nix files

#+begin_src nix :noweb-ref home-packages
nixfmt
#+end_src

** pandoc

#+begin_src nix :noweb-ref home-packages
pandoc
#+end_src

* Entertainment
** COMMENT Stremio

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/stremio.nix { })
#+end_src
** Spotify
#+begin_src nix :noweb-ref home-packages
spotify
#+end_src
** Deluge

#+begin_src nix :noweb-ref home-packages
deluge
#+end_src

** VLC

#+begin_src nix :noweb-ref home-packages
vlc
#+end_src

** Kodi
#+begin_src nix :noweb-ref home-packages
unstable.kodi
#+end_src
** OBS

#+begin_src nix :noweb-ref home-packages
obs-studio
#+end_src
** Calibre

GTK+ book reader

#+begin_src nix :noweb-ref home-packages
calibre
#+end_src

** COMMENT Tremulous
#+begin_src nix :noweb-ref home-packages
tremulous
#+end_src

#+begin_src nix :noweb-ref system-configuration
nixpkgs.config.allowBroken = true;
#+end_src

#+begin_src nix :noweb-ref overlays
(self: super: {
  tremulous = super.tremulous.overrideAttrs (old: rec {
    buildInputs = [self.which];
  });
})
#+end_src
** Steam

Whitelist unfree packages

#+begin_src nix :noweb-ref unfree-packages
  "steam" "steam-unwrapped"
#+end_src

Install steam

#+begin_src nix :noweb-ref system-configuration
  programs.steam.enable = true;
#+end_src

*** COMMENT fix "X Error of failed request: BadMatch (invalid parameter attributes)"

#+begin_src nix :noweb-ref system-configuration
environment.variables = {
  # to fix "X Error of failed request: BadMatch (invalid parameter attributes)"
  __GLVND_DISALLOW_PATCHING = "1";
};
#+end_src

** Spotify
#+begin_src nix :noweb-ref unfree-packages
  "spotify" "spotify-unwrapped"
#+end_src
#+begin_src nix :noweb-ref home-packages
spotify
#+end_src
** COMMENT StarSector

#+begin_src nix :noweb-ref home-packages
starsector
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"starsector"
#+end_src

*** COMMENT Use necauqua's fork

#+begin_src nix :noweb-ref overlays
(self: super: {
  inherit (import (fetchTarball {
    url = "https://github.com/necauqua/nixpkgs/archive/starsector-fixes.tar.gz";
    sha256 = "1nizf43qsy59vprx2s3h01v0md9a74aww0a5l2k5m5mfvqprhz7r";
  }) {
    inherit pkgs;
    config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
      <<unfree-packages>>
    ];
  }) starsector;
})
#+end_src

*** COMMENT Use Shados's fork

#+begin_src nix :noweb-ref overlays
(self: super: with {
  inherit (import (fetchTarball {
    url = "https://github.com/Shados/nixpkgs/archive/starsector-package-improvements.tar.gz";
    sha256 = "16g182421bhp5crdijlnn55v5m5wg64fwj8ld2vfb9jfjpwpwwkd";
  }) {
    config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
      <<unfree-packages>>
    ];
  }) starsector;
})
#+end_src

*** Mods

#+begin_src nix :noweb-ref home-import-files
./modules/starsector
#+end_src

#+begin_src nix :noweb-ref home-configuration
programs.starsector = {
  enable = true;
  mods = mods: with mods; [
    AudioPlus
    Autosave
    BetterColonies
    CombatAlarmSounds
    CombatChatter
    DetailedCombatResults
    FastEngineRendering
    GraphicsLib
    HazardMiningCorporation
    IndustrialEvolution
    LazyLib
    MagicLib
    Nixerelin
    RealisticCombat
    SpeedUp
    SuperweaponsArsenal
    UnknownSkies
  ];
};
#+end_src

Superweapons mod is distributed as a rar archive.

#+begin_src nix :noweb-ref unfree-packages
"unrar"
#+end_src

*** COMMENT Mods

#+begin_src nix :noweb-ref overlays
(self: super: {
  starsector = super.callPackage ./pkgs/starsector { pkgs = super; };
})
#+end_src

#+begin_src nix :noweb-ref overlays
(self: super: {
  starsector = super.starsector.withMods (mods:
    with mods; [
      AudioPlus
      Autosave
      BetterColonies
      CombatAlarmSounds
      CombatChatter
      DetailedCombatResults
      FastEngineRendering
      HazardMiningCorporation
      GraphicsLib
      # RealisticCombat
      IndustrialEvolution
      LazyLib
      MagicLib
      Nixerelin
      SpeedUp
      SuperweaponsArsenal
      UnknownSkies
    ]);
})
#+end_src

Superweapons mod is distributed as a rar archive.

#+begin_src nix :noweb-ref unfree-packages
"unrar"
#+end_src

*** COMMENT Update

#+begin_src nix :noweb-ref overlays
(self: super: {
  starsector = super.starsector.overrideAttrs (old: rec {
    # it tries to run everything with relative paths, which makes it CWD dependent
    # also point mod, screenshot, and save directory to $XDG_DATA_HOME
    postPatch = old.postPatch + ''
      substituteInPlace starsector.sh \
        --replace "./" "\$XDG_DATA_HOME/starsector/" \
        --replace "com.fs.starfarer.settings.paths.logs=." \
        "com.fs.starfarer.settings.paths.logs=\$XDG_DATA_HOME/starsector"
    '';
  });
})
#+end_src

** Joy-Con support

#+begin_src nix :noweb-ref system-configuration
  services.joycond.enable = true;
#+end_src
