# -*- eval: (add-hook 'after-save-hook 'org-babel-tangle nil 'local) -*-
#+TITLE: NixOS configuratoin
#+STARTUP: showall
#+PROPERTY: header-args :tangle no :noweb yes :noweb-ref system-configuration

#+BEGIN_SRC nix :tangle /etc/nixos/configuration.nix :noweb-ref none
  # edit this configuration file to define what should be installed on
  # your system.  help is available in the configuration.nix(5) man page
  # and in the nixos manual (accessible by running ‘nixos-help’).
  { config, lib,  pkgs, ... }:

  {
    imports =
      [ # include the results of the hardware scan.
        ./hardware-configuration.nix ./secrets.nix ./pia-openvpn.nix
        <<import-files>>
      ];

    environment.systemPackages = with pkgs; [
      <<system-packages>>
    ];

    nixpkgs.overlays = [
      <<overlays>>
    ];

    nixpkgs.config.permittedInsecurePackages = [
      <<insecure-packages>>
    ];

    nixpkgs.config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [
      <<unfree-packages>>
    ];

    <<system-configuration>>

    # this value determines the nixos release from which the default
    # settings for stateful data, like file locations and database versions
    # on your system were taken. it‘s perfectly fine and recommended to leave
    # this value at the release version of the first install of this system.
    # before changing this value read the documentation for this option
    # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
    system.stateVersion = "21.05"; # did you read the comment?
  }
#+END_SRC

* Nix
** Flakes

#+begin_src nix :noweb-ref system-configuration
nix.extraOptions = ''
  experimental-features = nix-command flakes
'';
#+end_src

** Home Manager

Load home-manager module

#+begin_src nix :noweb-ref import-files
  <home-manager/nixos>
#+end_src

Configure home environment

#+begin_src nix :noweb-ref system-configuration
  home-manager.users.mpontus = { pkgs, ... }: {
    imports = [
      <<home-import-files>>
    ];

    home.packages = with pkgs; [
      <<home-packages>>
    ];


    <<home-configuration>>

    home.stateVersion = "18.09";
  };
#+end_src

*** Use global nixpkgs

#+begin_src nix :noweb-ref system-configuration
home-manager.useGlobalPkgs = true;
#+end_src

*** NUR

Enable custom user repositories

#+begin_src nix :noweb-ref home-configuration
  nixpkgs.config.packageOverrides = pkgs: {
    nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
      inherit pkgs;
    };
  };
#+end_src

*** Root user

Give root user git

#+begin_src nix :noweb-ref system-configuration
  home-manager.users.root = { pkgs, ... }: {
    home.packages = with pkgs; [ htop git ];
    home.stateVersion = "18.09";
  };
#+end_src

** Store optimization

#+begin_src nix
nix.settings.auto-optimise-store = true;
#+end_src

** Unstable channel

#+begin_src nix :noweb-ref system-configuration
nix.package = pkgs.nixUnstable;
#+end_src

* System
** Boot loader

#+begin_src nix
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
#+end_src

** Time zone

#+begin_src nix
  # Set your time zone.
  time.timeZone = "Europe/Moscow";
#+end_src

** Users

#+begin_src nix
  users.users.mpontus = {
    isNormalUser = true;
    hashedPassword = "$6$QrKXg5g6nEHsWbkm$GdlWBtzXoQo7djWCJcMYcAZ/Zypk13Bq6nETchLc49hstumtoZ2q0tKvvrX3CLxqEmnZhDA8/0aw/Sen9mo5L/";
    extraGroups = [ "wheel" "pcspkr" ];
  };
#+end_src

*** sudo

Increase sudo password timeout

#+begin_src nix :noweb-ref system-configuration
  security.sudo.extraConfig = ''
    Defaults        env_reset,timestamp_timeout=30
  '';
#+end_src

*** Enable `$HOME/bin` in $PATH for normal users

#+begin_src nix
  environment.homeBinInPath = true;
#+end_src

*** COMMENT Root password

Don't forget to reset a password with ‘passwd’

#+begin_src nix
  users.users.root.initialPassword = "nixos";
#+end_src

*** XDG environment

#+begin_src nix
  environment.sessionVariables = rec {
    XDG_CACHE_HOME  = "\${HOME}/.cache";
    XDG_CONFIG_HOME = "\${HOME}/.config";
    XDG_BIN_HOME    = "\${HOME}/.local/bin";
    XDG_DATA_HOME   = "\${HOME}/.local/share";

    PATH = [
      "\${XDG_BIN_HOME}"
    ];
  };
#+end_src

** Networking
*** Hostname

#+begin_src nix
  networking.hostName = "nixos"; # Define your hostname.
#+end_src

*** DHCP

#+begin_src nix
  networking.useDHCP = false;
  networking.interfaces.wlp2s0.useDHCP = true;
#+end_src

*** Firewall

Disabled to allow visiting locally running website from mobile

#+begin_src nix
  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;
#+end_src

*** VPN

#+begin_src nix
services.openvpn.servers.pia = {
  config = "config ${pkgs.fetchzip {
    url = "https://www.privateinternetaccess.com/openvpn/openvpn.zip";
    sha256 = "0vxm18gzn7fi7dd85rmj3hnbral568bgczhvgi8cb348lx5i23v4";
    stripRoot = false   ;
  }}/belgium.ovpn";
};
#+end_src

**** Restart VPN after network configuration change

#+begin_src nix
# See https://discourse.nixos.org/t/run-script-on-network-interface-down/9167/2
networking.networkmanager.dispatcherScripts = [
  {
    source = pkgs.writeScript "dispatcherLog" ''
      echo "1='$1' 2='$2'" >> /tmp/dispatcher-log

      if [[ "$1" == "wlp2s0" ]]; then
        if  [[ "$2" == "down" ]]; then
          ${pkgs.systemd}/bin/systemctl stop openvpn-pia
        else
          ${pkgs.systemd}/bin/systemctl restart openvpn-pia
        fi
      fi
    '';
  }
];

#+end_src

*** Spoof defalt ttl

#+begin_src nix
boot.kernel.sysctl = {
  "net.ipv4.ip_default_ttl" = 65;
};

#+end_src

** Virtualization
#+begin_src nix :noweb-ref system-packages
  pkgs.virt-manager
#+end_src

#+begin_src nix :noweb-ref system-configuration
  boot.kernelModules = ["kvm-intel" "kvm-amd"];
  virtualisation.libvirtd.enable = true;
#+end_src

*** Increase default msize

#+begin_src nix :noweb-ref system-configuration
environment.variables = {
    QEMU_OPTS = "-m 4096 -smp 4 -enable-kvm";
};
#+end_src

* Desktop
** Fonts

#+begin_src nix :noweb-ref system-configuration
  fonts = {
    enableDefaultFonts = false;
    fonts = with pkgs; [
      noto-fonts
      noto-fonts-cjk
      noto-fonts-emoji
      twitter-color-emoji
      liberation_ttf
      fira-code
      fira-code-symbols
      # mplus-outline-fonts
      dina-font
      proggyfonts
      source-code-pro
      gentium
      (nerdfonts.override { fonts = [ "FiraCode" "DroidSansMono" ]; })
    ];
  };
#+end_src
** Xorg

#+begin_src nix :noweb-ref system-configuration
  services.xserver.enable = true;
#+end_src

*** Attempt to fix window flickering

See: https://askubuntu.com/a/1231443/350323

#+begin_src nix :noweb-ref system-configuration
services.xserver.config = ''
Section "Device"

Identifier "Intel Graphics"
Driver "intel"
Option "AccelMethod" "sna"
Option "TearFree" "true"

EndSection
'';
#+end_src

** GDM

#+begin_src nix :noweb-ref system-configuration
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.displayManager.gdm.wayland = false;
#+end_src

** Gnome

Enable the GNOME Desktop Environment

#+begin_src nix :noweb-ref system-configuration
  services.xserver.desktopManager.gnome.enable = true;
#+end_src
*** Extensions

#+begin_src nix :noweb-ref system-packages
gnome.gnome-tweaks
#+end_src

*** Auto-login

#+begin_src nix :noweb-ref system-configuration
  systemd.services."getty@tty1".enable = true;
  systemd.services."autovt@tty1".enable = true;
  # services.xserver.displayManager.autoLogin.enable = true;
  # services.xserver.displayManager.autoLogin.user = "mpontus";
#+end_src

*** DConf

#+begin_src nix :noweb-ref home-packages
  gnome.dconf-editor
#+end_src

DConf settings

#+begin_src nix :noweb-ref home-configuration
  dconf.settings = {
    <<dconf-settings>>
  } // (lib.trivial.pipe {
    <<dconf-keymap>>
  } [
    (lib.attrsets.mapAttrsToList (binding: { name, command }: {
      inherit binding name command;
    }))
    (lib.lists.imap0 (i: value: {
      name = "org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom${toString(i)}";
      inherit value;
    }))
    lib.attrsets.listToAttrs
  ]
  );
#+end_src

*** Disable warning message when opening GUI

#+begin_src nix :noweb-ref dconf-settings
  "ca/desrt/dconf-editor" = { show-warning = false; };
#+end_src

*** Hotkeys

Install run-or-raise

#+begin_src nix :noweb-ref home-packages
  (callPackage ./pkgs/run-or-raise { })
#+end_src

Configure gnome keybindings

#+begin_src nix :noweb-ref dconf-keymap
  "<Super>e" = {
    name = "Switch to Emacs";
    command = "launch-or-raise -W Emacs emacs";
  };
  "<Shift><Super>e" = {
    name = "Switch to Element";
    command = "launch-or-raise -W Element1 element-desktop";
  };
  "<Super>w" = {
    name = "Switch to Firefox";
    command = "launch-or-raise -W Navigator firefox";
  };
  "<Shift><Super>c" = {
    name = "Switch to Chromium";
    command = "run-or-raise 'class = \"Chroimum\"' chromium-browser";
  };
  "<Super>t" = {
    name = "Switch to Telegram";
    command = "run-or-raise 'class = \"TelegramDesktop\"' telegram-desktop";
  };
  "<Super>c" = {
    name = "Tilix";
    command = "launch-or-raise -W tilix tilix";
  };
  "<Super><Return>" = {
    name = "Tilix (dropdown)";
    command = "tilix --quake";
  };
  "<Shift><Super>c" = {
    name = "Tilix (preferences)";
    command = "tilix --preferences";
  };
  "<Super>s" = {
    name = "Switch to Slack";
    command = "run-or-raise 'class = \"Slack\"' slack";
  };
  "<Super>v" = {
    name = "Switch to VSCode";
    command = "run-or-raise 'class = \"Code\"' code";
  };
  "<Shift><Super>t" = {
    name = "Switch to TopTracker";
    command = "launch-or-raise -W TopTracker TopTracker";
  };
#+end_src

*** Gestures

#+begin_src nix :noweb-ref system-packages
gnomeExtensions.x11-gestures touchegg
#+end_src

See https://www.reddit.com/r/NixOS/comments/6x22z0/enabling_touch_screen/

#+begin_src nix :noweb-ref system-configuration
services.xserver.libinput.enable = true;
services.xserver.libinput.touchpad.naturalScrolling = false;
services.xserver.libinput.touchpad.tapping = true;
services.xserver.libinput.touchpad.disableWhileTyping = true;
services.xserver.libinput.touchpad.horizontalScrolling = true;
services.xserver.modules = [ pkgs.xf86_input_wacom ];
services.xserver.wacom.enable = true;
#+end_src

** COMMENT LightDM
** COMMENT XMonad

#+begin_src nix :noweb-ref system-configuration
services.xserver.windowManager.xmonad = {
  enable = true;
  enableContribAndExtras = true;
};
#+end_src

** Sound

#+begin_src nix
  sound.enable = true;
#+end_src

*** PulseAudio

#+begin_src nix
hardware.pulseaudio.enable = true;
#+end_src

**** Bluetooth support for PulseAudio

#+begin_src nix
hardware.pulseaudio.package = pkgs.pulseaudioFull;
hardware.pulseaudio.extraConfig = "
  load-module module-switch-on-connect
";
#+end_src

*** COMMENT Bluetooth audio

#+begin_src nix
  hardware.bluetooth.settings = {
    General = {
        # Disable = "Headset";
        # Enable = "Source,Sink,Headet,Media,Socket";
        # Disable = "Socket";
        # MultiProfile = "multiple";
    };
  };
#+end_src

*** COMMENT Blueman

#+begin_src nix
  services.blueman.enable = true;
#+end_src

** Bluetooth

#+begin_src nix
hardware.bluetooth.enable = true;
#+end_src

*** DWM

#+begin_src nix :noweb-ref system-configuration
services.xserver.windowManager.dwm.enable = true;
#+end_src

* Apps
** Editor
*** Emacs (system)

#+begin_src nix :noweb-ref system-configuration
services.emacs = {
  enable = true;
};
#+end_src

**** COMMENT Overlay

#+begin_src nix :noweb-ref system-configuration
  services.emacs.package = pkgs.emacsUnstable.pkgs.withPackages (epkgs: [ epkgs.vterm ]);
#+end_src


#+begin_src nix :noweb-ref overlays
(import (builtins.fetchTarball {
    url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
}))
#+end_src

**** COMMENT VTerm

#+begin_src nix :noweb-ref system-configuration
  services.emacs.package = with pkgs; (emacs.pkgs.withPackages (epkgs: [ epkgs.vterm ]));
#+end_src

**** COMMENT Emacs (overlay)

#+begin_src nix :noweb-ref system-configuration
  services.emacs.package = with pkgs; (emacsPgtkGcc.emacsWithPackages (epkgs: [ epkgs.vterm ]));
#+end_src

#+begin_src nix :noweb-ref system-packages
  emacsPgtkGcc
#+end_src

#+begin_src nix :noweb-ref overlays
    (import (builtins.fetchGit {
      url = "https://github.com/nix-community/emacs-overlay.git";
      ref = "master";
      rev = "bfc8f6edcb7bcf3cf24e4a7199b3f6fed96aaecf"; # change the revision
    }))
#+end_src

**** COMMENT Emacs (home-manager)
#+begin_src nix :noweb-ref home-configuration
# programs.emacs = {
#   enable = true;
# };
services.emacs = {
  enable = true;
  client.enable = true;
  defaultEditor = true;
};
#+end_src

*** vim
**** Default editor
#+begin_src nix :noweb-ref system-configuration
programs.vim.defaultEditor = true;
#+end_src
** Browser
*** Firefox

#+begin_src nix :noweb-ref home-configuration
programs.firefox.enable = true;
#+end_src

**** Nightly

#+begin_src nix :noweb-ref overlays
(import (builtins.fetchTarball https://github.com/mozilla/nixpkgs-mozilla/archive/master.tar.gz))
#+end_src

#+begin_src nix :noweb-ref home-configuration
programs.firefox.package = pkgs.latest.firefox-nightly-bin.unwrapped;
#+end_src

**** COMMENT Native extensions
#
#+begin_src nix :noweb-ref home-configuration
  programs.firefox.package = pkgs.firefox-unwrapped.override {
    # See nixpkgs' firefox/wrapper.nix to check which options you can use
    cfg = {
      # Gnome shell native connector
      enableGnomeExtensions = true;
      # Tridactyl native connector
      enableTridactylNative = true;
    };
  };
#+end_src

**** Addons

#+begin_src nix :noweb-ref system-configuration
nixpkgs.config.packageOverrides = pkgs: {
  nur = import (builtins.fetchTarball "https://github.com/nix-community/NUR/archive/master.tar.gz") {
    inherit pkgs;
  };
};
#+end_src

#+begin_src nix :noweb-ref home-configuration
  programs.firefox.extensions = with pkgs.nur.repos.rycee.firefox-addons; [
    https-everywhere
    privacy-badger
  ];
#+end_src

**** COMMENT Gestures

Make firefox use xinput2 for improved touchscreen support

#+begin_src nix :noweb-ref home-configuration
  home.sessionVariables = {
    MOZ_USE_XINPUT2 = "1";
  };
#+end_src

**** COMMENT Firefox (system)

** Passwords
*** GNU Pass
#+begin_src nix :noweb-ref home-packages
pass
#+end_src
** COMMENT Personal finance
*** Ledger

#+begin_src nix :noweb-ref home-packages
ledger
#+end_src
** Shell
*** bash
#+begin_src nix :noweb-ref home-configuration
  programs.bash = {
    enable = true;
    historySize = 100000;
    historyFileSize = 100000;
    historyControl = ["ignoredups" "erasedups"];
    initExtra = ''
        export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
    '';
    enableVteIntegration = true;
  };
#+end_src

*** fish
#+begin_src nix :noweb-ref system-configuration
programs.fish.enable = true;
#+end_src

**** COMMENT Default shell
#+begin_src nix :noweb-ref system-configuration
users.users.mpontus.shell = pkgs.fish;
#+end_src

**** COMMENT Home-manager

Home-manager version of fish allows installing plugins

#+begin_src nix :noweb-ref home-configuration
  programs.fish = {
    enable = true;
    plugins = [
      <<fish-plugins>>
    ];
  };
#+end_src

**** z

Plugin for jumping to recent directories

#+begin_src nix :noweb-ref fish-plugins
{
  name = "z";
  src = pkgs.fetchFromGitHub {
    owner = "jethrokuan";
    repo = "z";
    rev = "e0e1b9dfdba362f8ab1ae8c1afc7ccf62b89f7eb";
    sha256 = "0dbnir6jbwjpjalz14snzd3cgdysgcs3raznsijd6savad3qhijc";
  };
}
#+end_src

**** TODO COMMENT zsh-like up behavior

> call up the last local command on the first up-arrow, but then resort to merged history

Source: https://github.com/fish-shell/fish-shell/issues/825#issuecomment-440286038

#+begin_src nix
{
  body = ''
    function up-or-search -d "Depending on cursor position and current mode, either search backward or move up one line"
        # If we are already in search mode, continue
        if commandline --search-mode
            commandline -f history-search-backward
            return
        end

        # If we are navigating the pager, then up always navigates
        if commandline --paging-mode
            commandline -f up-line
            return
        end

        # We are not already in search mode.
        # If we are on the top line, start search mode,
        # otherwise move up
        set lineno (commandline -L)

        switch $lineno
            case 1
                commandline -f history-search-backward
                history merge # <-- ADDED THIS

            case '*'
                commandline -f up-line
        end
    end
  '';
}
#+end_src
** Terminal
*** Tilix (dropdown terminal emulator)

#+begin_src nix :noweb-ref home-packages
tilix
#+end_src

*** COMMENT Urxvt

#+begin_src nix :noweb-ref home-configuration
programs.urxvt = {
  enable = true;
  package = pkgs.rxvt-unicode-emoji;
  fonts = [ "xft:Droid Sans Mono Nerd Font:size=9" ];
};
#+end_src
** Productivity
*** COMMENT Obsidian

#+begin_src nix :noweb-ref home-packages
obsidian
#+end_src

*** COMMENT Roam Research

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/roamresearch { })
#+end_src

*** COMMENT Amazing Mavin

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/marvin.nix { })
#+end_src

*** TopTracker

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/toptracker { })
#+end_src
** Communication
*** Slack

#+begin_src nix :noweb-ref unfree-packages
"slack"
#+end_src

#+begin_src nix :noweb-ref home-packages
slack
#+end_src

*** Telegram

#+begin_src nix :noweb-ref home-packages
tdesktop
#+end_src

*** Element

#+begin_src nix :noweb-ref home-packages
element-desktop
#+end_src

*** Discord

#+begin_src nix :noweb-ref home-packages
discord
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"discord"
#+end_src
*** COMMENT Bluejeans

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/bluejeans { })
#+end_src
* System tools
** Monitoring
*** htop

Monitor active procesesses, memory and CPU usage

#+begin_src nix :noweb-ref home-packages
htop
#+end_src

*** lsof

List open files and sockets

#+begin_src nix :noweb-ref home-packages
lsof
#+end_src
** Filesystem
*** file

Determine file type

#+begin_src nix :noweb-ref home-packages
file
#+end_src

*** tree

List directory contents recursively

#+begin_src nix :noweb-ref home-packages
tree
#+end_src

*** ncdu

Count file and directory sizes recursively.

#+begin_src nix :noweb-ref home-packages
ncdu
#+end_src

*** unzip

Unzip files.

#+begin_src nix :noweb-ref home-packages
unzip
#+end_src
** Searching
*** ag

Search text in files.

#+begin_src nix :noweb-ref home-packages
silver-searcher
#+end_src

*** ripgrep

#+begin_src nix :noweb-ref home-packages
ripgrep
#+end_src

*** fd

Search files by name.

#+begin_src nix :noweb-ref home-packages
fd
#+end_src
*** locate

Use `locate` to find files globally

#+begin_src nix :noweb-ref system-configuration
  # Enable `locate` command
  services.locate = {
    enable = true;
    locate = pkgs.mlocate;
    localuser = null;
    interval = "1h";
  };
#+end_src

** Processing
*** jq

Transform JSON files

#+begin_src nix :noweb-ref home-packages
jq
#+end_src

*** htmlq

Transform XML/HTML files

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/htmlq { })
#+end_src

*** imagemagick

Transform image files

#+begin_src nix :noweb-ref home-packages
imagemagick
#+end_src

** Scripting
*** Clipboard

#+begin_src nix :noweb-ref home-packages
  wl-clipboard
#+end_src

*** WM controls

#+begin_src nix :noweb-ref home-packages
  wmctrl xdotool xorg.xprop xorg.xwininfo
#+end_src

* Development
** VSCode

#+begin_src nix :noweb-ref home-packages
vscode
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"vscode"
#+end_src

** COMMENT Direnv
** Git

#+begin_src nix :noweb-ref system-packages
git
#+end_src

*** COMMENT Git LFS

Large File Storage

#+begin_src nix :noweb-ref system-packages
git-lfs
#+end_src

*** GitHub CLI

#+begin_src nix :noweb-ref home-packages
hub
#+end_src

** GPG

#+begin_src nix :noweb-ref home-packages
  gnupg
#+end_src

*** gpg-agent

???

#+begin_src nix :noweb-ref home-configuration
  services.gpg-agent = {
    enable = true;
    defaultCacheTtl = 1800;
    enableSshSupport = true;
  };
#+end_src

** IPFS
*** /etc/hosts

#+begin_src nix :noweb-ref system-configuration
networking.extraHosts = ''
  127.0.0.1 ipfs.local
'';
#+end_src

** Docker

#+begin_src nix
  virtualisation.docker.enable = true;
#+end_src

*** Add user to docker group

#+begin_src nix :noweb-ref system-configuration
  users.extraGroups.docker.members = ["mpontus"];
#+end_src

*** Mitigate hangs on system shutdown

See https://discourse.nixos.org/t/docker-hanging-on-reboot/18270

#+begin_src nix :noweb-ref system-configuration
virtualisation.docker.liveRestore = false;
#+end_src
** COMMENT Virtualbox

#+begin_src nix :noweb-ref nonfree-packages
  "Oracle_VM_VirtualBox_Extension_Pack"
#+end_src

#+begin_src nix :noweb-ref system-configuration
  virtualisation.virtualbox.host.enable = true;
  virtualisation.virtualbox.host.enableExtensionPack = true;
  users.extraGroups.vboxusers.members = ["mpontus"];
#+end_src

** awscli

#+begin_src nix :noweb-ref home-packages
awscli2
#+end_src

** prettier

Format code using prettier

#+begin_src nix :noweb-ref home-packages
nodePackages."prettier"
#+end_src

** nixfmt

Format Nix files

#+begin_src nix :noweb-ref home-packages
nixfmt
#+end_src

* COMMENT Entertainment
** Stremio

#+begin_src nix :noweb-ref home-packages
(callPackage ./pkgs/stremio.nix { })
#+end_src

** Deluge

#+begin_src nix :noweb-ref home-packages
deluge
#+end_src

** VLC

#+begin_src nix :noweb-ref home-packages
vlc
#+end_src

** OBS
** Calibre

GTK+ book reader

#+begin_src nix :noweb-ref home-packages
calibre
#+end_src


#+begin_src nix :noweb-ref home-packages
obs-studio
#+end_src

** Steam

Whitelist unfree packages

#+begin_src nix :noweb-ref unfree-packages
  "steam" "steam-original" "steam-runtime"
#+end_src

Install steam

#+begin_src nix :noweb-ref system-configuration
  programs.steam.enable = true;
#+end_src

*** COMMENT fix "X Error of failed request: BadMatch (invalid parameter attributes)"

#+begin_src nix :noweb-ref system-configuration
environment.variables = {
  # to fix "X Error of failed request: BadMatch (invalid parameter attributes)"
  __GLVND_DISALLOW_PATCHING = "1";
};
#+end_src

** StarSector

#+begin_src nix :noweb-ref system-packages
starsector                      #
#+end_src

#+begin_src nix :noweb-ref unfree-packages
"starsector"
#+end_src

*** COMMENT Overlay

#+begin_src nix :noweb-ref overlays
(self: super: {
  starsector = super.callPackage ./pkgs/starsector { pkgs = super; };
})
#+end_src


*** COMMENT Mods

#+begin_src nix :noweb-ref overlays
(self: super: {
  starsector = super.starsector.withMods (mods:
    with mods; [
      Autosave
      AudioPlus
      BetterColonies
      Nixerelin
      IndustrialEvolution
      SuperweaponsArsenal
      GraphicsLib
      LazyLib
      MagicLib
    ]);
})
#+end_src

Superweapons mod is distributed as a rar archive.

#+begin_src nix :noweb-ref unfree-packages
"unrar"
#+end_src

*** COMMENT Update

#+begin_src nix :noweb-ref overlays
(self: super: {
  starsector = super.starsector.overrideAttrs (old: rec {
    # it tries to run everything with relative paths, which makes it CWD dependent
    # also point mod, screenshot, and save directory to $XDG_DATA_HOME
    postPatch = old.postPatch + ''
      substituteInPlace starsector.sh \
        --replace "./" "\$XDG_DATA_HOME/starsector/" \
        --replace "com.fs.starfarer.settings.paths.logs=." \
        "com.fs.starfarer.settings.paths.logs=\$XDG_DATA_HOME/starsector"
    '';
  });
})
#+end_src
